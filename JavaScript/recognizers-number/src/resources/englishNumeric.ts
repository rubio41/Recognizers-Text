// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

import { BaseNumbers } from "./baseNumbers";
export namespace EnglishNumeric {
	export const LangMarker = 'Eng';
	export const RoundNumberIntegerRegex = `(hundred|thousand|million|billion|trillion)`;
	export const ZeroToNineIntegerRegex = `(three|seven|eight|four|five|zero|nine|one|two|six)`;
	export const AnIntRegex = `(an|a)(?=\\s)`;
	export const TenToNineteenIntegerRegex = `(seventeen|thirteen|fourteen|eighteen|nineteen|fifteen|sixteen|eleven|twelve|ten)`;
	export const TensNumberIntegerRegex = `(seventy|twenty|thirty|eighty|ninety|forty|fifty|sixty)`;
	export const SeparaIntRegex = `(((${TenToNineteenIntegerRegex}|(${TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex})(\\s+${RoundNumberIntegerRegex})*))|((${AnIntRegex}(\\s+${RoundNumberIntegerRegex})+))`;
	export const AllIntRegex = `((((${TenToNineteenIntegerRegex}|(${TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex}|${AnIntRegex})(\\s+${RoundNumberIntegerRegex})+)\\s+(and\\s+)?)*${SeparaIntRegex})`;
	export const PlaceHolderPureNumber = `\\b`;
	export const PlaceHolderDefault = `\\D|\\b`;
	export const NumbersWithPlaceHolder = (placeholder: string) => { return `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+(?!(\\.\\d+[a-zA-Z]))(?=${placeholder})`; }
	export const NumbersWithSuffix = `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s*(K|k|M|T|G)(?=\\b)`;
	export const RoundNumberIntegerRegexWithLocks = `(?<=\\b)\\d+\\s+${RoundNumberIntegerRegex}(?=\\b)`;
	export const NumbersWithDozenSuffix = `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+dozen(s)?(?=\\b)`;
	export const AllIntRegexWithLocks = `((?<=\\b)${AllIntRegex}(?=\\b))`;
	export const AllIntRegexWithDozenSuffixLocks = `(?<=\\b)(((half\\s+)?a\\s+dozen)|(${AllIntRegex}\\s+dozen(s)?))(?=\\b)`;
	export const RoundNumberOrdinalRegex = `(hundredth|thousandth|millionth|billionth|trillionth)`;
	export const BasicOrdinalRegex = `(first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth|eleventh|twelfth|thirteenth|fourteenth|fifteenth|sixteenth|seventeenth|eighteenth|nineteenth|twentieth|thirtieth|fortieth|fiftieth|sixtieth|seventieth|eightieth|ninetieth)`;
	export const SuffixBasicOrdinalRegex = `(((((${TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex}|${AnIntRegex})(\\s+${RoundNumberIntegerRegex})+)\\s+(and\\s+)?)*(${TensNumberIntegerRegex}(\\s+|\\s*-\\s*))?${BasicOrdinalRegex})`;
	export const SuffixRoundNumberOrdinalRegex = `((${AllIntRegex}\\s+)${RoundNumberOrdinalRegex})`;
	export const AllOrdinalRegex = `(${SuffixBasicOrdinalRegex}|${SuffixRoundNumberOrdinalRegex})`;
	export const OrdinalSuffixRegex = `(?<=\\b)((\\d*(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|0th))|(11th|12th))(?=\\b)`;
	export const OrdinalNumericRegex = `(?<=\\b)(\\d{1,3}(\\s*,\\s*\\d{3})*\\s*th)(?=\\b)`;
	export const OrdinalRoundNumberRegex = `(?<!(a|an)\\s+)${RoundNumberOrdinalRegex}`;
	export const OrdinalEnglishRegex = `(?<=\\b)${AllOrdinalRegex}(?=\\b)`;
	export const FractionNotationWithSpacesRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))`;
	export const FractionNotationRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))`;
	export const FractionNounRegex = `(?<=\\b)(${AllIntRegex}\\s+(and\\s+)?)?(${AllIntRegex})(\\s+|\\s*-\\s*)(((${AllOrdinalRegex})|(${RoundNumberOrdinalRegex}))s|halves|quarters)(?=\\b)`;
	export const FractionNounWithArticleRegex = `(?<=\\b)(${AllIntRegex}\\s+(and\\s+)?)?(a|an|one)(\\s+|\\s*-\\s*)((${AllOrdinalRegex})|(${RoundNumberOrdinalRegex})|half|quarter)(?=\\b)`;
	export const FractionPrepositionRegex = `(?<=\\b)((${AllIntRegex})|((?<!\\.)\\d+))\\s+over\\s+((${AllIntRegex})|(\\d+)(?!\\.))(?=\\b)`;
	export const AllPointRegex = `((\\s+${ZeroToNineIntegerRegex})+|(\\s+${SeparaIntRegex}))`;
	export const AllFloatRegex = `${AllIntRegex}(\\s+point)${AllPointRegex}`;
	export const DoubleWithMultiplierRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))\\d+\\.\\d+\\s*(K|k|M|G|T|B|b)(?=\\b)`;
	export const DoubleExponentialNotationRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))(\\d+(\\.\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)`;
	export const DoubleCaretExponentialNotationRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))(\\d+(\\.\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)`;
	export const DoubleDecimalPointRegex = (placeholder: string) => { return `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))\\d+\\.\\d+(?!(\\.\\d+))(?=${placeholder})`; }
	export const DoubleWithoutIntegralRegex = (placeholder: string) => { return `(?<=\\s|^)(?<!(\\d+))\\.\\d+(?!(\\.\\d+))(?=${placeholder})`; }
	export const DoubleWithRoundNumber = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))\\d+\\.\\d+\\s+${RoundNumberIntegerRegex}(?=\\b)`;
	export const DoubleAllFloatRegex = `((?<=\\b)${AllFloatRegex}(?=\\b))`;
	export const CurrencyRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s*(B|b|m|t|g)(?=\\b)`;
	export const NumberWithSuffixPercentage = `(${BaseNumbers.NumberReplaceToken})(\\s*)(%|per cents|per cent|cents|cent|percentage|percents|percent)`;
	export const NumberWithPrefixPercentage = `(per cent of|percent of|percents of)(\\s*)(${BaseNumbers.NumberReplaceToken})`;
	export const DecimalSeparatorChar = '.';
	export const FractionMarkerToken = 'over';
	export const NonDecimalSeparatorChar = ',';
	export const HalfADozenText = 'six';
	export const WordSeparatorToken = 'and';
	export const WrittenDecimalSeparatorTexts = [ 'point' ];
	export const WrittenGroupSeparatorTexts = [ 'punto' ];
	export const WrittenIntegerSeparatorTexts = [ 'and' ];
	export const WrittenFractionSeparatorTexts = [ 'and' ];
	export const HalfADozenRegex = `half\\s+a\\s+dozen`;
	export const DigitalNumberRegex = `((?<=\\b)(hundred|thousand|million|billion|trillion|dozen(s)?)(?=\\b))|((?<=(\\d|\\b))(k|t|m|g|b)(?=\\b))`;
	export const CardinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["a", 1],["zero", 0],["an", 1],["one", 1],["two", 2],["three", 3],["four", 4],["five", 5],["six", 6],["seven", 7],["eight", 8],["nine", 9],["ten", 10],["eleven", 11],["twelve", 12],["dozen", 12],["dozens", 12],["thirteen", 13],["fourteen", 14],["fifteen", 15],["sixteen", 16],["seventeen", 17],["eighteen", 18],["nineteen", 19],["twenty", 20],["thirty", 30],["forty", 40],["fifty", 50],["sixty", 60],["seventy", 70],["eighty", 80],["ninety", 90],["hundred", 100],["thousand", 1000],["million", 1000000],["billion", 1000000000],["trillion", 1000000000000]]);
	export const OrdinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["first", 1],["second", 2],["secondary", 2],["half", 2],["third", 3],["fourth", 4],["quarter", 4],["fifth", 5],["sixth", 6],["seventh", 7],["eighth", 8],["ninth", 9],["tenth", 10],["eleventh", 11],["twelfth", 12],["thirteenth", 13],["fourteenth", 14],["fifteenth", 15],["sixteenth", 16],["seventeenth", 17],["eighteenth", 18],["nineteenth", 19],["twentieth", 20],["thirtieth", 30],["fortieth", 40],["fiftieth", 50],["sixtieth", 60],["seventieth", 70],["eightieth", 80],["ninetieth", 90],["hundredth", 100],["thousandth", 1000],["millionth", 1000000],["billionth", 1000000000],["trillionth", 1000000000000],["firsts", 1],["halves", 2],["thirds", 3],["fourths", 4],["quarters", 4],["fifths", 5],["sixths", 6],["sevenths", 7],["eighths", 8],["ninths", 9],["tenths", 10],["elevenths", 11],["twelfths", 12],["thirteenths", 13],["fourteenths", 14],["fifteenths", 15],["sixteenths", 16],["seventeenths", 17],["eighteenths", 18],["nineteenths", 19],["twentieths", 20],["thirtieths", 30],["fortieths", 40],["fiftieths", 50],["sixtieths", 60],["seventieths", 70],["eightieths", 80],["ninetieths", 90],["hundredths", 100],["thousandths", 1000],["millionths", 1000000],["billionths", 1000000000],["trillionths", 1000000000000]]);
	export const RoundNumberMap: ReadonlyMap<string, number> = new Map<string, number>([["hundred", 100],["thousand", 1000],["million", 1000000],["billion", 1000000000],["trillion", 1000000000000],["hundredth", 100],["thousandth", 1000],["millionth", 1000000],["billionth", 1000000000],["trillionth", 1000000000000],["hundredths", 100],["thousandths", 1000],["millionths", 1000000],["billionths", 1000000000],["trillionths", 1000000000000],["dozen", 12],["dozens", 12],["k", 1000],["m", 1000000],["g", 1000000000],["b", 1000000000],["t", 1000000000000]]);
}
